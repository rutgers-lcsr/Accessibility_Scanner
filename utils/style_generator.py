

from hashlib import md5
import random
import string
from typing import List, TypedDict
from scanner.accessibility.ace import AxeResult

LEVEL = {
    'critical': 'border: 3px solid red; z-index: 9999; position: relative;',
    'serious': 'border: 3px solid orange; z-index: 9999; position: relative;',
    'moderate': 'border: 3px solid yellow; z-index: 9999; position: relative;',
    'minor': 'border: 3px solid green; z-index: 9999; position: relative;',
    'null': 'border: 3px solid gray; z-index: 9999; position: relative;'
}

tooltip_style = "position: absolute; z-index: 9999;pointer-events: none; text-align: center; background-color: rgba(255, 255, 255, 0.9); text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); color: black; padding: 5px; border-radius: 4px; font-size: 12px; font-family: Arial, sans-serif; top: 0; left: 0; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); min-width: 300px; overflow: 'auto';"

class Injection(TypedDict):
    selector: str
    style: str
    description: str
    message: str
    helping: str
    help_url: str

def report_to_js(report: List[AxeResult], report_url: str) -> str:
    """Generates javascript which can be used to find accessibility violations in a webpage.

    Args:
        report (List[AxeResult]): The accessibility report containing violation details.

    Returns:
        str: A string containing the generated JavaScript code.
    """
    injections = []

    for violation in report:
       for node in violation['nodes']:
            selector = ", ".join(node['target'])

            injection = Injection(
               selector=selector,
               style=LEVEL[violation['impact']],
               message=node['failureSummary'],
               description=violation['description'],
               help=violation['help'],
               help_url=violation['helpUrl'],
            )
            injections.append(injection)

    return generate_js_list(injections, report_url)

def generate_random_string(length):
    """
    Generates a random string of a specified length using uppercase letters and digits.

    Args:
        length (int): The desired length of the random string.

    Returns:
        str: The generated random string.
    """
    characters = string.ascii_uppercase + string.ascii_lowercase
    random_string = ''.join(random.choice(characters) for _ in range(length))
    return random_string

def generate_js(injection: Injection) -> str:
    selector_hash = generate_random_string(10)
    selector_small_hash = generate_random_string(5)
    js_code = f"""
try {{
    var {selector_small_hash} = document.querySelector(`{str(injection['selector'])}`);
    var {selector_small_hash}_old_style = {selector_small_hash}.getAttribute('style') || "";
    {selector_small_hash}.style = "{injection['style']}" + {selector_small_hash}_old_style;
    {selector_small_hash}.setAttribute('data-violation-description', `{injection['description']}`);
    {selector_small_hash}.setAttribute('data-violation-message', `{injection['message']}`);
    {selector_small_hash}.setAttribute('data-violation-help', `{injection['help']}`);
    {selector_small_hash}.setAttribute('data-violation-help-url', `{injection['help_url']}`);
    {selector_small_hash}.onmouseenter = function() {{
        accesslog(`Tooltip shown for:{injection['message']}\n{injection['description']}\n{injection['help']}\nLearn More at: {injection['help_url']}`);

        var tooltip = document.createElement('div');
        tooltip.className = 'tooltip-{selector_hash}';
        tooltip.innerHTML = `{injection['message']} <br> {injection['help']} <br> Click to Learn More`;
        tooltip.style = "{tooltip_style}";
        {selector_small_hash}.appendChild(tooltip);
    }};
    {selector_small_hash}.onmouseleave = function() {{
        var tooltip = document.querySelector('.tooltip-{selector_hash}');
        if (tooltip) {{
            {selector_small_hash}.removeChild(tooltip);
        }}
    }};
    
    {selector_small_hash}.onclick = function() {{
        window.open(`{injection['help_url']}`, '_blank');
    }};
    accesslog(`Marked: {injection['selector']} with hash {selector_hash}`);
    console.log({selector_small_hash});
}}
catch (error) {{
    accesslog('Error injecting styles:',"error", error);
}}
    """
    return js_code


def generate_js_list(injections: List[Injection], report_url: str) -> str:
    """Generates JavaScript code to apply the given styles to a webpage.

    Args:
        styles (List[dict]): A list of style objects containing selector and properties.

    Returns:
        str: A string containing the generated JavaScript code.
    """

    injection_code = "\n".join(generate_js(injection) for injection in injections)

    js_code = f"""
/* 
This script was generated by the Accessibility Scanner
*/
var header = `****** Accessibility Scanner Report Script ******`
console.log(header)

const currentUrl = window.location.href;
var accesslog = (message, level = "info", args = []) => {{
    console.log(`[Access] [${{level}}]: ${{message}}`, ...args);
}};
if(currentUrl.includes(`{report_url}`)) {{
  
    {injection_code}

}} else {{
    accesslog(`The report URL does not match the current URL. Report URL: {report_url}, Current URL: ${{currentUrl}}`, "warning");
    accesslog(`This error occurs because the script was run outside the report context.`, "warning");
    accesslog(`You might have pasted the script into the wrong element on the Report page or ran it on the wrong page.`, "warning");
    accesslog(`Please ensure you are running the script in the correct context.`, "warning");
    accesslog(`If you still have issues please check out this https://developer.chrome.com/docs/devtools/console/reference#context to help with switching contexts.`, "warning");
    
}}
"""



    return js_code